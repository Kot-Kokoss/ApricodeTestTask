import React from 'react';
import styles from './TaskData.module.scss';
const TaskData = () => {
  return (
    <div className={styles.taskInfo}>
      <div className={styles.taskTitle}>Зaдача 1.1</div>
      <p className={styles.text}>
        менем и статусом выполнения (выполнена / не выполнена). Создание компонентов: Разделите
        интерфейс на различные компоненты. Например, можно создать компоненты Task для представления
        отдельно взятой задачи и Subtask для представления подзадач. Также можно создать компонент
        TodoList, который будет хранить все задачи и отвечать за их отображение. Управление
        состоянием: Используйте useState или useReducer для управления состоянием задач и их
        подзадач. useState отлично подходит для небольших приложений, в то время как useReducer
        может быть более полезным для более сложной логики управления состоянием. Состояние может
        хранить массив задач, и для каждой задачи можно хранить массив подзадач. Добавление
        функциональности: Реализуйте возможность добавления задач и подзадач. Для этого можно
        использовать текстовое поле, где пользователи могут вводить названия задач и подзадач и
        добавлять их по нажатию клавиши Enter. Позвольте пользователям удалять выполненные задачи и
        подзадачи или отмечать их как выполненные . Отображение задач и подзадач: Отобразите задачи
        и их подзадачи в удобном формате, используя список . Убедитесь, что подзадачи визуально
        вложены под соответствующими задачами. Стилизация:
      </p>
    </div>
  );
};

export default TaskData;
